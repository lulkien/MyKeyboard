use defmt::Format;

#[allow(unused, dead_code)]
#[repr(u8)]
#[derive(Copy, Clone, Format, PartialEq)]
pub enum KeyCode {
    Empty = 0x0,

    ErrRollOver = 0x01,
    ErrPostFail = 0x02,
    ErrUndefined = 0x03,

    A = 0x04,
    B = 0x05,
    C = 0x06,
    D = 0x07,
    E = 0x08,
    F = 0x09,
    G = 0x0A,
    H = 0x0B,
    I = 0x0C,
    J = 0x0D,
    K = 0x0E,
    L = 0x0F,
    M = 0x10,
    N = 0x11,
    O = 0x12,
    P = 0x13,
    Q = 0x14,
    R = 0x15,
    S = 0x16,
    T = 0x17,
    U = 0x18,
    V = 0x19,
    W = 0x1A,
    X = 0x1B,
    Y = 0x1C,
    Z = 0x1D,

    Num1 = 0x1E,
    Num2 = 0x1F,
    Num3 = 0x20,
    Num4 = 0x21,
    Num5 = 0x22,
    Num6 = 0x23,
    Num7 = 0x24,
    Num8 = 0x25,
    Num9 = 0x26,
    Num0 = 0x27,

    Enter = 0x28,
    Escape = 0x29,
    Backspace = 0x2A,
    Tab = 0x2B,
    Space = 0x2C,
    Minus = 0x2D,
    Equals = 0x2E,
    LBrace = 0x2F,
    RBrace = 0x30,
    BSlash = 0x31,
    HashTilde = 0x32, // Non US keyboard # and ~
    Semicolon = 0x33,
    Quote = 0x34,
    Tilde = 0x35,
    Comma = 0x36,
    Period = 0x37,
    Slash = 0x38,
    CapsLock = 0x39,

    F1 = 0x3A,
    F2 = 0x3B,
    F3 = 0x3C,
    F4 = 0x3D,
    F5 = 0x3E,
    F6 = 0x3F,
    F7 = 0x40,
    F8 = 0x41,
    F9 = 0x42,
    F10 = 0x43,
    F11 = 0x44,
    F12 = 0x45,

    Print = 0x46,
    ScrollLock = 0x47,
    Pause = 0x48,
    Insert = 0x49,
    Home = 0x4A,
    PgUp = 0x4B,
    Delete = 0x4C,
    End = 0x4D,
    PgDn = 0x4E,

    Right = 0x4F,
    Left = 0x50,
    Down = 0x51,
    Up = 0x52,

    NumLock = 0x53,
    KpSlash = 0x54,
    KpAsterisk = 0x55,
    KpMinus = 0x56,
    KpPlus = 0x57,
    KpEnter = 0x58,
    KpNum1 = 0x59,
    KpNum2 = 0x5A,
    KpNum3 = 0x5B,
    KpNum4 = 0x5C,
    KpNum5 = 0x5D,
    KpNum6 = 0x5E,
    KpNum7 = 0x5F,
    KpNum8 = 0x60,
    KpNum9 = 0x61,
    KpNum0 = 0x62,
    KpDot = 0x63,

    Compose = 0x65,
    Power = 0x66,
    KpEquals = 0x67,

    F13 = 0x68,
    F14 = 0x69,
    F15 = 0x6A,
    F16 = 0x6B,
    F17 = 0x6C,
    F18 = 0x6D,
    F19 = 0x6E,
    F20 = 0x6F,
    F21 = 0x70,
    F22 = 0x71,
    F23 = 0x72,
    F24 = 0x73,

    Open = 0x74,
    Help = 0x75,
    Props = 0x76,
    Front = 0x77,
    Stop = 0x78,
    Again = 0x79,
    Undo = 0x7A,
    Cut = 0x7B,
    Copy = 0x7C,
    Paste = 0x7D,
    Find = 0x7E,
    VolumeMute = 0x7F,
    VolumeUp = 0x80,
    VolumeDown = 0x81,

    KpComma = 0x85,

    KpLParen = 0xB6,
    KpRParen = 0xB7,

    // Modifier keys
    Fn = 0xF0,
    LCtrl = 0xF1,
    LShift = 0xF2,
    LAlt = 0xF3,
    LSuper = 0xF4,
    RCtrl = 0xF5,
    RShift = 0xF6,
    RAlt = 0xF7,
    RSuper = 0xF8,
}

impl KeyCode {
    pub fn modifier_bitmask(&self) -> Option<u8> {
        match *self {
            KeyCode::LCtrl => Some(1 << 0),
            KeyCode::LShift => Some(1 << 1),
            KeyCode::LAlt => Some(1 << 2),
            KeyCode::LSuper => Some(1 << 3),
            KeyCode::RCtrl => Some(1 << 4),
            KeyCode::RShift => Some(1 << 5),
            KeyCode::RAlt => Some(1 << 6),
            KeyCode::RSuper => Some(1 << 7),
            _ => None,
        }
    }

    pub fn is_modifier(&self) -> bool {
        *self == KeyCode::Fn || self.modifier_bitmask().is_some()
    }
}
